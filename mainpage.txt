The FazCAN driver is a C/C++/Arduino driver for the MCP2515 CAN controller module.  It allows the user to create a two-wire communication network between two or more CAN modules or to interface with other CAN networks.

To use the driver in the Arduino build environment, copy the CAN directory into the "libraries" subdirectory of your Arduino sketchbook directory.

To use the driver in a normal C/C++ build environment, open "my_spi.h" and change the ARDUINO macro near the top to "0":
~~~~~{c}
#define ARDUINO          0
~~~~~
For straight C code, rename "mcp2515.cpp" to "mcp2515.c" and interface with this file directly.  For C++ code, you can either interface with "mcp2515.cpp," or with the classes in CAN.cpp.  The rest of this documentation describes using the C++ interface.

Before using the CAN module, you must call CAN.begin(), specifying the bus speed as an argument.  Several standard speeds are defined in CAN.h, such as CAN_SPEED_125000:
~~~~~{c}
CAN.begin (CAN_SPEED_125000);
~~~~~
Alternatively, you can directly specify the bit period in nanoseconds.  If you want a bit period of 25 microseconds (equivalent to a bus speed of 40000), you can specify it this way:
~~~~~{c}
CAN.begin (25000);
~~~~~

Next you must set the CAN mode.  The modes are defined in CAN.h.  You will probably want to use CAN_MODE_NORMAL or CAN_MODE_LISTEN_ONLY.
~~~~~{c}
CAN.setMode (CAN_MODE_NORMAL);
~~~~~
CAN_MODE_NORMAL will allow the MCP2515 to transmit and receive on the CAN bus normally.  CAN_MODE_LISTEN_ONLY only allows the MCP2515 to receive, preventing it from interacting on the bus.  This ensures that the module does not interfere with regular network activity.

To determine if you have received a CanMessage, call CAN.available ().  If this function returns true, there is a message to be retrieved.  Retrieve the message by calling CAN.getMessage ().  You must have declared a CanMessage variable to receive the message into.
~~~~~{c}
CanMessage message;

if (CAN.available ()) {
    message = CAN.getMessage ();
}
~~~~~

A CanMessage has an identifier, which is a number that indicates what kind of message it is.  There is no universal set of CAN identifiers; instead the identifier is specific to the application.  If you are creating your own CAN network, you can pick the CAN identifiers.  If you are interfacing with another network, you need to use the identifiers defined by that network protocol.

The CAN identifier can be either 11 bits or 29 bits.  If the CAN message uses an 11-bit identifier, the "extended" flag of the CAN message will be false.  If the message uses a 29-bit identifier, the "extended" flag will be true.  The CAN ID and extended flags can be written and read directly from the message object:
~~~~~{c}
id = message.id;
if (message.extended) {
    // Handle extended message
} else {
    // Handle non-extended message
}
~~~~~

A CanMessage also has from zero to eight data bytes.  The message identifier indicates what type of data is included in the message.  If you are creating a CAN network of sensors that detect temperature and GPS position, you might use one identifier for a CanMessage whose data contains the temperature, and another identifier for a CanMessage whose data contains the GPS coordinates.  When a receiver receives a message, it can use the identifier to determine how to use the data in the message.  The extended flag does not change anything about the message data.  Both extended and non-extended messages can have zero to eight bytes of data.

The data can be retrieved from the CanMessage in two ways.  The first is to read the bytes of data directly from the message array:
~~~~~{c}
byte0 = message.data[0];
byte1 = message.data[1];
~~~~~
The length field tells you how many bytes of data are in the message:
~~~~~{c}
for (i = 0; i < message.len; i++) {
    // Process data bytes
}
~~~~~

The second way is specific to this library, and will only work if you are creating your own network using this library.  It is not recommended for interfacing with existing CAN networks.  The functions getByteFromData, getIntFromData, and getLongFromData allow you to read one variable from the message.  Use the correct function for the length of the data you are trying to read:
~~~~~{c}
byte pulses;
int temperature;

pulses = message1.getByteFromData ();
temperature = message2.getIntFromData ();
~~~~~
Again, you should only use these if you are reading messages from a sender that is also using this library. 

Sending messages is very similar to receiving messages.  Declare a CanMessage variable.  Set the identifier and the flag indicating whether the identifier is extended or not.
~~~~~{c}
CanMessage message;

message.id = 0x501;
message.extended = false;
~~~~~

Next set the data.  You can do this in two ways.  The first is by writing directly into the data array:
~~~~~{c}
message.data[0] = my_val1;
message.data[1] = my_val2;
message.len = 2;
~~~~~
Note that the data array is an array of bytes, so you cannot store an int or long type in one array element:
~~~~~{c}
int my_val = 12345;
message.data[0] = my_val;  // WRONG
~~~~~
The second way is to use one of the set functions:
~~~~~{c}
message.setIntData (my_val);
~~~~~
The set functions store the variable in the data array and set the data length for you.  Only one value can be stored in a CanMessage by the set functions.  If you call a second set function, it will replace the previous value:
~~~~~{c}
byte val1 = 12;
int val2 = 12345;
message.setByteData (val1);
message.setIntData (val2);  // OK to do, but it overwrites val1
~~~~~
After setting the identifier and data, a message is ready to be sent.  You must wait for the CAN module to be ready before sending.  When it is ready, the message can be sent by calling the send method:
~~~~~{c}
while (CAN.ready () == false) {
    // Wait for CAN to be ready
}
message.send ();
~~~~~

A CanMessage variable can be reused.  After sending you can call send again to send the same message again.  You can also change any or all of the members (id, len, data) to send a different message.

For more information, see the examples included in the FazCAN library.

